@page "/LoginCallback/"
@layout EmptyLayout

@using Microsoft.AspNetCore.WebUtilities
@using global::Login.ST.UEH

@code {
    public string? api;
    protected override void OnInitialized()
    {
        api = Configuration["apiBackend"];
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var uri = new Uri(NavigationManager.Uri);
        var queryParameters = QueryHelpers.ParseQuery(uri.Query);
        var t = queryParameters["t"];
        UserLogin? user;

        switch (t) {
            case "exist-admin":
                await NavigateTo("/tongquan");
                break;

            case "exist-teacher":
                await NavigateTo("/sinhvien");
                break;

            case "exist-student":
                await NavigateTo("/thongtin");
                break;
            
            case "admin":

                user = new UserLogin
                {
                    UserId = "000688",
                    Name = "Phan Hiền",
                    Email = "hienphan@ueh.edu.vn",
                    Sdt = "0909259404",
                    Role = "teacher"
                };

                await LoginRequest(user);
                await NavigateTo("/tongquan");
                break;

            case "gv":

                user = new UserLogin
                {
                    UserId = "001747",
                    Name = "Đặng Thái Thịnh",
                    Email = "thinhdt@ueh.edu.vn",
                    Sdt = "0905553609",
                    Role = "teacher"
                };

                await LoginRequest(user);
                await NavigateTo("/sinhvien");
                break;

            default:

                var obj = LoginStUEH.GetInfo(t);
                if (obj != null)
                {
                    Student stu = (Student) obj;
                    user = (UserLogin) stu;

                    await LoginRequest(user);
                    await NavigateTo("/thongtin");
                }
                break;

        }

    }

    private async Task LoginRequest(UserLogin user)
    {
        if (user != null)
        {
            string token = System.Text.Json.JsonSerializer.Serialize(user);
            token = AES.EncryptData(token);

            @* await JS.InvokeVoidAsync("console.log", token); *@

            token = Uri.EscapeDataString(token);

            var url = api + $"User/LoginUser?encryptedJson={token}";
            var response = await Http.PostAsync(url, new StringContent(""));

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                User? getUser = JsonConvert.DeserializeObject<User>(content);

                string tokenUser = System.Text.Json.JsonSerializer.Serialize(getUser);
                tokenUser = AES.EncryptData(tokenUser);
                await JS.InvokeVoidAsync("userLogin", tokenUser, 30);
            }
            else
            {
                Console.WriteLine("Đã xảy ra lỗi khi gửi !");
            }
        }
    }

    private async Task NavigateTo(string RedirectTo)
    {
        NavigationManager.NavigateTo(RedirectTo);
    }
}
