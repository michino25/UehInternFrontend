@page "/baocao"
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using System.Net;

@using iText.Kernel.Pdf;
@using iText.Layout;
@using iText.Layout.Element;
@using iText.Kernel.Pdf.Xobject
@using iText.IO.Image;


@inject IWebHostEnvironment env;
@code {
    public string? api;
    private List<SinhvienModel>? sinhviens = new List<SinhvienModel>();
    private DotModel dot = new DotModel();
    private string? magv = "";
    private string? madot = "";

    private string? hkdn = "HKDN";
    private string? kltn = "KL";

    private User? currentUser;

    protected override void OnInitialized()
    {
        api = Configuration["apiBackend"];
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            currentUser = await Service.GetUser(JS, NavigationManager);
            madot = currentUser.MaDot;
            magv = currentUser.Code;

            StateHasChanged();

            await RenderDatas();

            StateHasChanged();
        }
    }

    private async Task RenderDatas()
    {
        var result = await SinhVienByGiangVien(madot, magv);
        if (result != null )
        {
            sinhviens = result;
            StateHasChanged();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Giảng viên không được tìm thấy.");
        }
    }

    private async Task<List<SinhvienModel>> SinhVienByGiangVien(string madot,string magv)
    {
        var response = await Http.GetAsync(api + $"Giangvien/SinhVienByGiangVien?madot={madot}&magv={magv}");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            var uploadModel = JsonConvert.DeserializeObject<List<SinhvienModel>>(content);
            return uploadModel;
        }
        else
        {
            Console.WriteLine($"Lỗi khi truy xuất sinh viên: {response.StatusCode}");
            return null;
        }
    }

    private async Task DownloadPdf(string mssv)
    {
        var response = await Http.GetAsync(api + $"Ketqua/DiemChiTietSv?mssv={mssv}");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            var diem = JsonConvert.DeserializeObject<ChiTietDiem>(content);

            await PrintPDF.ChiTietDiem(JS, diem);
           // await JS.InvokeVoidAsync("alert", "Tải dữ liệu in thành công");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Không tìm thấy dữ liệu");
        }
    }

    private async Task DownloadAllChiTietDiem()
    {
        var response = await Http.GetAsync(api + $"Ketqua/GetDanhSachDiemChiTietSv?madot={madot}&magv={magv}");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            var diem = JsonConvert.DeserializeObject<List<ChiTietDiem>>(content);

            await PrintPDF.AllChiTietDiem(JS, diem);
           // await JS.InvokeVoidAsync("alert", "Tải dữ liệu in thành công");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Không tìm thấy dữ liệu");
        }
    }

    private async Task DownloadPdfTongHop()
    {
        try
        {
            var responseHKDN = await Http.GetAsync(api + $"Ketqua/DsDiemTong?madot={madot}&maloai={hkdn}&magv={magv}");
            var responseKLTN = await Http.GetAsync(api + $"Ketqua/DsDiemTong?madot={madot}&maloai={kltn}&magv={magv}");
            if (responseKLTN.IsSuccessStatusCode && responseHKDN.IsSuccessStatusCode)
            {
                var contentKLTN = await responseKLTN.Content.ReadAsStringAsync();
                var bangdiemKLTN = JsonConvert.DeserializeObject<List<TongHopDiem>>(contentKLTN);

                var contentHKDN = await responseHKDN.Content.ReadAsStringAsync();
                var bangdiemHKDN = JsonConvert.DeserializeObject<List<TongHopDiem>>(contentHKDN);

                await PrintPDF.TongHopDiem(JS, bangdiemKLTN, bangdiemHKDN);
               //await JS.InvokeVoidAsync("alert", "Tải dữ liệu thành công");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Không tìm thấy dữ liệu");
            }
        }
        catch (Exception ex)
        {
            //await JS.InvokeVoidAsync("alert", "Không tìm thấy dữ liệu");
            await JS.InvokeVoidAsync("alert", "Đã xảy ra lỗi");
        }
    }


    private async Task DownloadFileMergePdf()
    {
        List<UploadModel> files = new List<UploadModel>();
        files = await  GetDsFileGvhd();


        List<byte[]> pdfBytesList = new List<byte[]>();
        List<byte[]> imgBytesList = new List<byte[]>();

        for(int i = 0;i <= files.Count-1;i++)
        {
            if(files[i].FileType == "Phiếu chấm điểm")
            {
                if(files[i].ContentType == "image/jpeg" ||  files[i].ContentType == "image/png")
                {
                    string filePath = Path.Combine(env.WebRootPath, "uploads", files[i].StoredFileName);
                    if (File.Exists(filePath))
                    {
                        byte[] imgBytes = await File.ReadAllBytesAsync(filePath);
                        imgBytesList.Add(imgBytes);
                    }
                }
                else
                {
                    string filePath = Path.Combine(env.WebRootPath, "uploads", files[i].StoredFileName);
                    if (File.Exists(filePath))
                    {
                        byte[] pdfBytes = await File.ReadAllBytesAsync(filePath);
                        pdfBytesList.Add(pdfBytes);
                    }
                }
            }
        }


        // Gọi hàm gộp PDF
        byte[] mergedBytes = MergePdfFiles(pdfBytesList,imgBytesList);
        if (mergedBytes == null)
        {
            await JS.InvokeVoidAsync("alert", "Chưa có file nào thuộc phiếu chấm điểm");
        }
        // Tạo tên tệp PDF đã gộp
        string storedFileName = "ToanBoPhieuDiemDN.pdf";

        // Gọi hàm JavaScript để tải xuống
        await JS.InvokeVoidAsync("downloadFileFromBytes", mergedBytes, storedFileName);
    }


    private async Task<List<UploadModel>> GetDsFileGvhd()
    {
        var response = await Http.GetAsync(api + $"File/GetDsFileGvhd?madot={madot}&magv={magv}");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            var listfiles = JsonConvert.DeserializeObject<List<UploadModel>>(content);
            return listfiles;
        }
        else
        {
            Console.WriteLine($"Lỗi khi truy xuất tệp: {response.StatusCode}");
            return null;
        }

    }


    private byte[] MergePdfFiles(List<byte[]> pdfBytesList, List<byte[]> imageBytesList)
    {
        using (MemoryStream ms = new MemoryStream())
        {
            PdfWriter writer = new PdfWriter(ms);
            PdfDocument mergedDocument = new PdfDocument(writer);
            Document document = new Document(mergedDocument);

            foreach (var pdfBytes in pdfBytesList)
            {
                PdfReader reader = new PdfReader(new MemoryStream(pdfBytes));
                PdfDocument pdfDocument = new PdfDocument(reader);
                int numberOfPages = pdfDocument.GetNumberOfPages();

                for (int pageNum = 1; pageNum <= numberOfPages; pageNum++)
                {
                    PdfPage page = pdfDocument.GetPage(pageNum);
                    PdfFormXObject formXObject = page.CopyAsFormXObject(mergedDocument);
                    Image img = new Image(formXObject);

                    document.Add(img);
                }

                pdfDocument.Close();
            }

            foreach (var imageBytes in imageBytesList)
            {
                // Tạo đối tượng Image từ mảng byte của ảnh
                ImageData imageData = ImageDataFactory.Create(imageBytes);
                Image image = new Image(imageData);

                document.Add(image);
            }

            document.Close();
            return ms.ToArray();
        }


    }

}
<PageTitle>Báo cáo</PageTitle>

<CheckUserComponent CheckRole="teacher" CheckDot=2>
<ItemContent>


<div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg">
    <div
        class="bg-white block sm:flex items-center justify-between border-b border-gray-200 lg:mt-1.5">
        <div class="w-full mb-5 sm:flex">
            <div class="mb-3 flex flex-col divide-x divide-gray-100">
                <h1 class="text-xl font-semibold text-gray-900 sm:text-2xl">Danh sách sinh viên</h1>
            </div>

            <div class="flex items-center ml-auto space-x-2 sm:space-x-3">

                        <button @onclick="() => DownloadFileMergePdf()" class="inline-flex items-center justify-center w-1/2 px-3 py-2 text-sm font-medium text-center text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:ring-teal-300 sm:w-auto">
                    <svg class="w-5 h-5 mr-2 -ml-1" fill="currentColor" viewBox="0 0 20 20"
                        xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd"
                            d="M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V7.414A2 2 0 0015.414 6L12 2.586A2 2 0 0010.586 2H6zm5 6a1 1 0 10-2 0v3.586l-1.293-1.293a1 1 0 10-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 11.586V8z"
                            clip-rule="evenodd"></path>
                    </svg>
                    Toàn bộ phiếu điểm DN
                </button>

                <button @onclick="() => DownloadPdfTongHop()" class="inline-flex items-center justify-center w-1/2 px-3 py-2 text-sm font-medium text-center text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:ring-teal-300 sm:w-auto">
                    <svg class="w-5 h-5 mr-2 -ml-1" fill="currentColor" viewBox="0 0 20 20"
                        xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd"
                            d="M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V7.414A2 2 0 0015.414 6L12 2.586A2 2 0 0010.586 2H6zm5 6a1 1 0 10-2 0v3.586l-1.293-1.293a1 1 0 10-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 11.586V8z"
                            clip-rule="evenodd"></path>
                    </svg>
                    Phiếu tổng hợp điểm
                </button>

                <button @onclick="() => DownloadAllChiTietDiem()" class="inline-flex items-center justify-center w-1/2 px-3 py-2 text-sm font-medium text-center text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:ring-teal-300 sm:w-auto">
                    <svg class="w-5 h-5 mr-2 -ml-1" fill="currentColor" viewBox="0 0 20 20"
                        xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd"
                            d="M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V7.414A2 2 0 0015.414 6L12 2.586A2 2 0 0010.586 2H6zm5 6a1 1 0 10-2 0v3.586l-1.293-1.293a1 1 0 10-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 11.586V8z"
                            clip-rule="evenodd"></path>
                    </svg>
                    Toàn bộ bảng điểm chi tiết
                </button>

            </div>
        </div>
    </div>
    <div class="flex flex-col">
        <div class="overflow-x-auto">
            <div class="inline-block min-w-full align-middle">
                <div class="overflow-hidden shadow">
                    <table class="min-w-full divide-y divide-gray-200 table-fixed">
                        <thead class="bg-gray-100">
                            <tr>
                                <th scope="col"
                                    class="p-4 text-xs font-medium text-left text-gray-500 uppercase">
                                    Sinh viên
                                </th>
                                <th scope="col"
                                    class="p-4 text-xs font-medium text-left text-gray-500 uppercase">
                                    Mã sinh viên
                                </th>
                                <th scope="col"
                                    class="p-4 text-xs font-medium text-left text-gray-500 uppercase">
                                    Lớp
                                </th>
                                <th scope="col"
                                    class="p-4 text-xs font-medium text-left text-gray-500 uppercase">
                                    Hành động
                                </th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @if (sinhviens != null)
                            { 
                                @foreach (var sinhvien in sinhviens)
                                {
                                    <tr class="hover:bg-gray-100">
                                <td class="flex items-center p-4 mr-12 space-x-6 whitespace-nowrap">
                                    <div class="text-sm font-normal text-gray-500">
                                        <div class="text-base font-semibold text-gray-900">
                                            @sinhvien.ho @sinhvien.ten
                                        </div>
                                        <div class="text-sm font-normal text-gray-500">
                                            @(sinhvien.email == null ? "Email chưa được cập nhật" : sinhvien.email) 
                                        </div>
                                    </div>
                                </td>
                                <td class="p-4 text-base font-medium text-gray-900 whitespace-nowrap">
                                    @sinhvien.mssv
                                </td>
                                <td class="p-4 text-base font-medium text-gray-900 whitespace-nowrap">
                                    @sinhvien.malop</td>
                                <td class="p-4 space-x-2 whitespace-nowrap">
                                    <button 
                                        type="button" data-modal-toggle="edit-user-modal"
                                        class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white rounded-lg bg-teal-700 hover:bg-teal-800 focus:ring-4 focus:ring-teal-300"
                                        @onclick="() => DownloadPdf(sinhvien.mssv)"
                                        >
                                        <svg class="w-5 h-5 mr-2 -ml-1" fill="currentColor" viewBox="0 0 20 20"
                                            xmlns="http://www.w3.org/2000/svg">
                                            <path fill-rule="evenodd"
                                                d="M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V7.414A2 2 0 0015.414 6L12 2.586A2 2 0 0010.586 2H6zm5 6a1 1 0 10-2 0v3.586l-1.293-1.293a1 1 0 10-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 11.586V8z"
                                                clip-rule="evenodd"></path>
                                        </svg>
                                        Tải báo cáo
                                    </button>
                                </td>
                            </tr>
                                }
                            }
                            


                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div
        class="sticky bottom-0 right-0 items-center w-full py-4 -mb-4 bg-white border-t border-gray-200 sm:flex sm:justify-between">
        <div class="flex items-center mb-4 sm:mb-0">
            <span class="text-sm font-normal text-gray-500">
                Hiển thị 
                <span class="font-semibold text-gray-900">@sinhviens.Count</span>
                sinh viên
            </span>
        </div>
    </div>

</div>


</ItemContent>
</CheckUserComponent>

@code {
    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }
}
