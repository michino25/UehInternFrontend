@inject IHttpContextAccessor HttpContextAccessor

@if (Role == "load"){      }
else if (Role != CheckRole){
    <Error Type="NoRole" />
}    
else if (
    (!CheckDotEqual && DotInfo >= CheckDot)
    || (CheckDotEqual && DotInfo == CheckDot)
    ){
    @* <h1>@Role Page</h1> *@
    @ItemContent
}    
else {
    <Error Type="PeriodNotOpen" />
}

@code {
    protected string? Role = "load";
    protected int? DotInfo = -1;
    private User? currentUser;

    [Parameter]
    public string? CheckRole { get; set; }

    [Parameter]
    public int? CheckDot { get; set; }

    [Parameter]
    public bool CheckDotEqual { get; set; }

    [Parameter]
    public RenderFragment ItemContent { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CheckDot = CheckDot == null ? 0 : CheckDot;
            @* CheckDotEqual = CheckDotEqual == null ? false : true; *@

            currentUser = await Service.GetUser(JS, NavigationManager, false);
            Role = currentUser.Role;
            DotInfo = currentUser.DotInfo;
            StateHasChanged();

            if (Role == CheckRole) {
                await JS.InvokeVoidAsync("userExtend", 30);

                @* Debug console log userinfo *@
                @* await JS.InvokeVoidAsync("console.log", Role); *@
            }

            await JS.InvokeVoidAsync("loadScript", "/js/tailwindcss.js");

            // Check thiết bị người dùng
            // CheckUserDevice();
        }
    }

    private async Task CheckUserDevice()
    {
        string userAgent = HttpContextAccessor.HttpContext.Request.Headers["User-Agent"].ToString();
        int deviceWidth = await JS.InvokeAsync<int>("getDeviceWidth");

        if (IsMobileDevice(userAgent) && deviceWidth < 720)
        {
            @* await JS.InvokeVoidAsync("console.log", userAgent); *@
            NavigationManager.NavigateTo("/mobiledevice");
        }
    }

    private bool IsMobileDevice(string userAgent)
    {
        return userAgent.Contains("iPhone", StringComparison.OrdinalIgnoreCase) ||
                userAgent.Contains("iPod", StringComparison.OrdinalIgnoreCase) ||
                (userAgent.Contains("Android", StringComparison.OrdinalIgnoreCase) && userAgent.Contains("Mobile", StringComparison.OrdinalIgnoreCase)) ||
                userAgent.Contains("BlackBerry", StringComparison.OrdinalIgnoreCase) ||
                userAgent.Contains("Windows Phone", StringComparison.OrdinalIgnoreCase);
    } 
}