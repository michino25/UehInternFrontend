@inject IJSRuntime JS
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@using UehInternFrontend
@using Newtonsoft.Json

@if (Role == "load"){      }
else if (Role != CheckRole){
    <Error Type="NoRole" />
}    
else {
    @* <h1>@Role Page</h1> *@
    @ItemContent
}

@code {
    protected string? Role = "load";

    [Parameter]
    public string? CheckRole { get; set; }

    [Parameter]
    public RenderFragment ItemContent { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetData();

            if (Role == CheckRole) {
                await JS.InvokeVoidAsync("userExtend", 30);
            }

            await JS.InvokeVoidAsync("loadScript", "/js/tailwindcss.js");

            // Check thiết bị người dùng
            CheckUserDevice();
        }
    }

    private async Task CheckUserDevice()
    {
        string userAgent = HttpContextAccessor.HttpContext.Request.Headers["User-Agent"].ToString();
        int deviceWidth = await JS.InvokeAsync<int>("getDeviceWidth");

        if (IsMobileDevice(userAgent) && deviceWidth < 720)
        {
            @* await JS.InvokeVoidAsync("console.log", userAgent); *@
            NavigationManager.NavigateTo("/mobiledevice");
        }
    }

    private bool IsMobileDevice(string userAgent)
    {
        return userAgent.Contains("iPhone", StringComparison.OrdinalIgnoreCase) ||
                userAgent.Contains("iPod", StringComparison.OrdinalIgnoreCase) ||
                (userAgent.Contains("Android", StringComparison.OrdinalIgnoreCase) && userAgent.Contains("Mobile", StringComparison.OrdinalIgnoreCase)) ||
                userAgent.Contains("BlackBerry", StringComparison.OrdinalIgnoreCase) ||
                userAgent.Contains("Windows Phone", StringComparison.OrdinalIgnoreCase);
    }

    private async Task GetData()
    {
        string token = await JS.InvokeAsync<string>("userInfo");
        string json = AES.DecryptData(token);
        @* await JS.InvokeVoidAsync("console.log", json); *@

        if (!string.IsNullOrEmpty(json))
        {
            User? user = JsonConvert.DeserializeObject<User>(json);
            Role = user.Role;
            StateHasChanged();
        }
        else 
        {
            // Chưa có cookie đăng nhập
            NavigationManager.NavigateTo("/loginsessionexpired");
        }
    }

}